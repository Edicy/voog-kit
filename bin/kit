#!/usr/bin/env ruby

require 'gli'

$LOAD_PATH << File.expand_path('../lib', File.dirname(__FILE__))
require 'json'

require 'voog/dtk'
require 'voog/dtk/watcher'
require 'voog/dtk/filemanager'
require 'voog/dtk/notifier'
require 'voog_api'

include GLI::App

sort_help :manually

program_desc 'A tool that manages uploading and downloading Voog layout files'

debug_args = [:debug, { negatable: false, default_value: false, desc: 'Show additional information on exceptions' }]
verbose_args = [:verbose, { negatable: false, default_value: false, desc: 'Show additional information while running' }]
silent_args = [:silent, { default_value: false, negatable: false, desc: 'Hide all information text while running' }]
hostname_args = [:h, :host, :hostname, { desc: 'Provide a hostname', arg_name: :HOST }]
api_token_args = [:t, :token, :api_token, { desc: 'Provide an API token', arg_name: :API_TOKEN }]
site_args = [:s, :site, { arg_name: :SITE, default_value: nil, desc: 'Specify which site block to use when parsing the .voog file' }]
overwrite_args = [:overwrite, { negatable: true, default_value: false, desc: 'Enable overwriting asset files that cannot be normally updated.' }]

flag *hostname_args
flag *api_token_args
flag *site_args

switch *debug_args
switch *verbose_args
switch *silent_args
switch *overwrite_args

version Voog::Dtk::VERSION

desc 'Initializes the local folder structure and files for a site'
long_desc "The init command takes a hostname and an api token
          as arguments, fetches the structure of the site and
          recreates it locally in the same folder the command
          was evoked in.\n
          If the hostname and/or api-token aren't provided via command-line
          arguments, the tool looks for a .voog file in the current working
          directory that has those. See the readme for more information
          (http://github.com/Edicy/voog-kit)"
command :init do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args

  c.desc 'Initializes the local project folder with remote layout files'
  c.action do |global_options, options, args|
    @filemanager.create_folders
    @filemanager.create_files
    @filemanager.generate_remote_manifest
  end

  c.desc 'Creates empty folders for a new project'
  c.command :empty do |e|
    e.action do |e|
      Voog::Dtk.write_config('','',false)
      @filemanager.create_folders
    end
  end

  c.desc 'Initializes the local project folder with boilerplate files and folders'
  c.command :new do |n|
    n.action do |global_options, options, args|
      if args.size
        @filemanager.clone_design args.first
      else
        @filemanager.clone_design
      end
    end
  end
end

desc 'Looks for missing files and folders'
command :check do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    @filemanager.check
  end
end

desc 'Fetches the layout and layout asset files for the given site'
long_desc "If no arguments are provided, the 'pull' command fetches all
          layout files and layout assets and (re-)generates a manifest file.
          If file or folder names are provided, it fetches any files matching the
          given names and updates the manifest with those files. The provided 
          names can be either folder names or full filenames. For layouts and 
          components, the .tpl extension is optional.\n
          Examples:\n
          kit pull images stylesheets javascripts\n
          kit pull images/image.png images/image.jpg\n
          kit pull layouts/front_page components/news.tpl"
command :pull do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    unless args.empty? # if filenames are given, pull specified files and generate new manifest
      @filemanager.pull_files(args)
    else # otherwise pull everything and generate new manifest
      @filemanager.create_folders
      @filemanager.create_files
      @filemanager.generate_remote_manifest
    end
  end
end

desc 'Updates remote files with local changes'
long_desc "The 'push' command takes the space-separated list of filenames and 
          uploads them, if possible, to Voog. When uploading layout files (layouts
          or components), the command looks for the manifest.json file to find which
          files correspond to which remote layouts."
command :push do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.switch *overwrite_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    @filemanager.upload_files args
  end
end

desc 'Removes a specific file and syncs it with the remote site'
long_desc 'This command removes a local file, removes it from the manifest and sends a delete
          request to remove it from the remote site as well.'
command :remove do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    @filemanager.remove_files args
  end
end

desc 'Adds a specific file to the manifest and syncs it with the remote site'
long_desc 'This command creates a new file, adds it to the manifest and creates
          a new file on the remote site as well.'
command :add do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    @filemanager.add_files args
  end
end

desc "Generates a manifest.json file from the site's layout and asset files."
long_desc "This looks through the current directory's subdirectories and files
          within them to compile a 'manifest.json' file. This is used for keeping
          metadata about layout files that can't easily be attached to files 
          themselves. When creating the manifest, you might have to manually 
          edit it to correspond to possible remote differences. When invoking the
          command with the --remote flag, the manifest is instead generated from
          remote files which, again, might not correspond to your local file structure."
command :manifest do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.switch *overwrite_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.switch(
    [:r, :remote],
    default_value: false,
    negatable: false,
    desc: 'generate manifest from remote files'
  )
  c.action do |global_options, options, args|
    if options.fetch(:remote, @config[:remote])
      @filemanager.generate_remote_manifest
    else
      @filemanager.generate_local_manifest
    end
  end
end

desc "Displays a list of all known sites that are defined in .voog files"
long_desc "The 'sites' command displays a list of all sites that are defined in
          .voog files, either in the local project folder, or in the user's hostname
          folder. Local sites are preferred over global ones."
command :sites do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.switch *overwrite_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    @filemanager.display_sites(Voog::Dtk.read_config(:all))
  end
end

desc 'Watches for file changes and pushes them automatically'
long_desc "This starts watching the current folder and its subfolders for file 
          changes and tries to push them to the remote site. When new files are
          added or old ones removed, it also adds or removes them from the manifest
          file, respectively. When local files are deleted, their remote counterparts
          are also deleted. You can exit by pressing Ctrl+D or typing 'q' or 'exit'."
command :watch do |c|
  c.switch *debug_args
  c.switch *verbose_args
  c.switch *silent_args
  c.switch *overwrite_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.flag *site_args
  c.action do |global_options, options, args|
    @notifier.info "Watching #{Dir.pwd}/ for changes..."
    @notifier.newline
    watcher = Voog::Dtk::Watcher.new(@filemanager, @debug)
    watcher.run
  end
end

pre do |global, command, options, args|
  @config_block = global.fetch(:site, nil) || options.fetch(:site, nil)
  @debug = global.fetch(:debug, false) || options.fetch(:debug, false)

  silent = global.fetch(:silent, false) || options.fetch(:silent, false)
  verbose = global.fetch(:verbose, false) || options.fetch(:verbose, false)
  overwrite = global.fetch(:overwrite, false) || options.fetch(:overwrite, false)

  @notifier = Voog::Dtk::Notifier.new($stderr, silent)

  host = global.fetch(:host, nil) || options.fetch(:host, nil)
  api_token = global.fetch(:token, nil) || options.fetch(:token, nil)

  if host && api_token
    Voog::Dtk.write_config({
      host: host,
      api_token: api_token,
      block: @config_block || host,
      overwrite: overwrite
    })
  end

  @config = Voog::Dtk.read_config @config_block

  if Voog::Dtk::config_exists? || Voog::Dtk::global_config_exists?
    unless [:new, :empty, :check].include? command.name
      fail 'Hostname not found from arguments or from configuration file'.red unless host || @config[:host]
      fail 'API token not found from arguments or from configuration file'.red unless api_token || @config[:api_token]
    end
  else
    unless [:new, :empty, :check].include? command.name
      fail 'Configuration file not found!'.red unless host && api_token
    end
  end

  host ||= @config[:host]
  api_token ||= @config[:api_token]

  client = Voog::Client.new(host, api_token)
  @filemanager = Voog::Dtk::FileManager.new(client, {
    silent: silent,
    verbose: verbose,
    overwrite: overwrite
  })
end

on_error do |exception|
  Voog::Dtk.handle_exception(exception, @debug, @notifier)
  false
end

exit run(ARGV)
