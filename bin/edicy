#!/usr/bin/env ruby

# TODO: Not needed after bundled as gem
gem 'guard'
require 'gli'

$LOAD_PATH << File.expand_path('../lib', File.dirname(__FILE__))
require 'json'

require 'edicy/dtk'
require 'edicy/dtk/guard'
require 'edicy/dtk/filemanager'
require 'edicy/dtk/notifier'
require 'edicy_api'

include GLI::App

sort_help :manually

program_desc 'A tool that manages uploading and downloading Edicy layout files'

version Edicy::Dtk::VERSION

verbose_args = [:verbose, { negatable: false, default_value: false, desc: 'Show additional information while running' }]
silent_args = [:silent, { default_value: false, negatable: false, desc: 'Hide all information text while running' }]
hostname_args = [:h, :host, :hostname, { desc: 'Provide a hostname', arg_name: :HOST }]
api_token_args = [:t, :token, :api_token, { desc: 'Provide an API token', arg_name: :API_TOKEN }]

switch *verbose_args
switch *silent_args

flag *hostname_args
flag *api_token_args

desc 'Initializes the local folder structure and files for a site'
long_desc "The init command takes a hostname and an api token
          as arguments, fetches the structure of the site and
          recreates it locally in the same folder the command
          was evoked in.\n
          If the hostname and/or api-token aren't provided via command-line
          arguments, the tool looks for a .edicy file in the current working
          directory that has those. See the readme for more information
          (http://github.com/Edicy/edicy-dtk)"
command :init do |c|
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.action do |global_options, options, args|
    @filemanager.create_folders
    @filemanager.create_files
  end

  c.command :empty do |e|
    e.action do |e|
      Edicy::Dtk.write_config('','',false)
      @filemanager.create_folders
    end
  end

  c.command :new do |n|
    n.action do |n|
      @filemanager.fetch_boilerplate
    end
  end
end

desc 'Looks for missing files and folders'
command :check do |c|
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.action do |global_options, options, args|
    @filemanager.check
  end
end

desc 'Fetches the layout and layout asset files for the given site'
long_desc 'If no arguments are provided, the \'pull\' command fetches all
          layout files and layout assets and (re-)generates a manifest file.
          If filenames are provided, it fetches only those and updates the
          manifest with only those files. The provided names can be either
          filenames or layout/component titles.'
command :pull do |c|
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.action do |global_options, options, args|
    unless args.empty? # if filenames are given, pull specified files and generate new manifest
      @filemanager.pull_files(args)
    else # otherwise pull everything and generate new manifest
      @filemanager.create_folders
      @filemanager.create_files
      @filemanager.generate_remote_manifest
    end
  end
end

desc 'Updates remote files with local changes'
long_desc "The 'push' command takes the space-separated list of filenames and 
          uploads them, if possible, to Edicy. When uploading layout files (layouts
          or components), the command looks for the manifest.json file to find which
          files correspond to which remote layouts."
command :push do |c|
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.action do |global_options, options, args|
    @filemanager.upload_files args
  end
end

desc "Generates a manifest.json file from the site's layout and asset files."
long_desc "This looks through the current directory's subdirectories and files
          within them to compile a 'manifest.json' file. This is used for keeping
          metadata about layout files that can't easily be attached to files 
          themselves. When creating the manifest, you might have to manually 
          edit it to correspond to possible remote differences. When invoking the
          command with the --remote flag, the manifest is instead generated from
          remote files which, again, might not correspond to your local file structure."
command :manifest do |c|
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.switch(
    [:r, :remote],
    default_value: false,
    negatable: false,
    desc: 'generate manifest from remote files'
  )
  c.action do |global_options, options, args|
    if options.fetch(:remote, @config[:remote])
      @filemanager.generate_remote_manifest
    else
      @filemanager.generate_local_manifest
    end
  end
end

desc 'Watches for file changes and pushes them automatically'
command :watch do |c|
  c.switch *verbose_args
  c.switch *silent_args
  c.flag *hostname_args
  c.flag *api_token_args
  c.action do |global_options, options, args|
    Edicy::Dtk::Guuard.new(@filemanager).run
    sleep 0.5 while ::Guard.running
  end
end

pre do |global, command, options, args|
  @config = Edicy::Dtk.read_config Edicy::Dtk::CONFIG_FILENAME
  @editmode = @config[:editmode]

  silent = global.fetch(:silent, false) || options.fetch(:silent, false)
  verbose = global.fetch(:verbose, false) || options.fetch(:verbose, false)

  @notifier = Edicy::Dtk::Notifier.new($stderr, silent)

  host = global.fetch(:host, nil) || options.fetch(:host, nil)
  api_token = global.fetch(:token) || options.fetch(:token)
  
  if Edicy::Dtk::config_exists?
    unless [:new, :empty, :check].include? command.name
      fail 'Hostname not found from arguments or from configuration file'.red unless (host || @config[:host])
      fail 'API token not found from arguments or from configuration file'.red unless (api_token || @config[:api_token])
    end
  else
    unless [:new, :empty, :check].include? command.name
      fail 'Configuration file not found!'.red unless host && api_token
    end
  end

  if Edicy::Dtk::config_exists?
    opts = {
      :host => @config[:host],
      :api_token => @config[:api_token],
      :silent => silent
    }
    # overwrite config if options are given explicitly
    opts[:host] = host if host
    opts[:api_token] = api_token if api_token

    Edicy::Dtk.write_config(*opts.values)
  else # if host and api token are given, write them to config file
    if (host && api_token)
      Edicy::Dtk.write_config(host, api_token, silent)
    end
  end

  host ||= @config[:host]
  api_token ||= @config[:api_token]

  client = Edicy::Client.new(host, api_token)
  @filemanager = Edicy::Dtk::FileManager.new(client, verbose, silent)
end

on_error do |exception|
  Edicy::Dtk.handle_exception(exception, @notifier)
  false
end

exit run(ARGV)
