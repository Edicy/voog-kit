#!/usr/bin/env ruby

# TODO: Not needed after bundled as gem
gem 'liquid'
gem 'guard'
require 'gli'

$LOAD_PATH << File.expand_path('../lib', File.dirname(__FILE__))
require 'json'

require 'edicy/dtk'
require 'edicy/dtk/guard'
require 'edicy/dtk/renderer'
require 'edicy/dtk/filemanager'
require 'edicy/dtk/filemanager'
require 'edicy_api'

include GLI::App

program_desc 'A tool to fetch and update Edicy design components'

version Edicy::Dtk::VERSION

desc 'Show additional information while running'
switch [:v, :verbose]

desc 'Provide a site url'
arg_name :SITE_URL
flag [:s, :site]

desc 'Provide an API token'
arg_name :API_TOKEN
flag [:t, :token]

desc 'Initializes the local folder structure and files for a site'
long_desc "The init command takes a site url and an api token
          as arguments, fetches the structure of the site and
          recreates it locally in the same folder the command
          was evoked in.\n
          If the site-url and/or api-token isn't provided, the tool
          looks for a .edicy file to get the site url and then looks
          for a .edicy file in your $HOME folder to get the api
          token."
command :init do |c|
  c.action do |global_options, options, args|
    $filemanager ||= Edicy::Dtk::FileManager.new
    if args && args.shift =~ /new/
      $filemanager.copy_site_json
      $filemanager.create_folders
      # TODO: pull boilerplate files to working directory
    else
      $filemanager.copy_site_json
      $filemanager.create_folders
      $filemanager.create_files
    end
  end
end

skips_pre
desc 'Looks for missing files and folders'
command :check do |c|
  c.action do |global_options, options, args|
    $filemanager ||= Edicy::Dtk::FileManager.new
    $filemanager.check
  end
end

desc 'Fetches the layout and layout asset files for the given site'
command :pull do |c|
  c.action do |global_options, options, args|
    $filemanager ||= Edicy::Dtk::FileManager.new
    $filemanager.create_folders
    $filemanager.create_files
  end
end

desc 'Describe push here'
command :push do |c|
  c.action do |global_options, options, args|
    # TODO: implement push
  end
end

desc "Generates a manifest.json file from the site's layout and asset files"
command :manifest do |c|
  c.action do |global_options, options, args|
    $filemanager ||= Edicy::Dtk::FileManager.new
    $filemanager.generate_local_manifest
  end
end

skips_pre
desc 'Watches for file changes in the current directory'
command :watch do |c|
  c.switch [:e, :editmode], 
    negatable: false, 
    desc: 'Specify if editmode should be considered on for the purpose of rendering (default: false)'
  c.action do |global_options, options, args|
    $renderer ||= Edicy::Dtk::Renderer.new(Dir.pwd)
    $renderer.editmode = options.fetch(:editmode) || $editmode
    $filemanager ||= Edicy::Dtk::FileManager.new

    Edicy::Dtk::Guuard.new($renderer, $filemanager).run

    sleep 0.5 while ::Guard.running
  end
end

desc 'Renders all pages into static .html files that are usable locally'
arg_name 'Describe arguments to build here'
skips_pre
command :build do |c|
  c.switch [:e, :editmode], 
    negatable: false, 
    desc: 'Specify if editmode should be considered on for the purpose of rendering (default: false)'
  c.action do |global_options, options, args|
    $renderer ||= Edicy::Dtk::Renderer.new(Dir.pwd)
    $renderer.editmode = options.fetch(:editmode) || $editmode
    $renderer.render_pages
  end
end

pre do |global, command, options, args|
  $config = Edicy::Dtk.read_config '.edicy'
  $editmode = $config[:editmode]
  unless (([:watch, :build].include? command.name) || (command.name == :init && args.first == 'new'))
    $site_url = global['site'] || $config[:site_url]
    $api_token = global['token'] || $config[:api_token]

    if $site_url.nil?
      begin
        read_site_url
      rescue
        raise 'Site URL not found from arguments nor from .edicy file'.red
      end
    end

    if $api_token.nil?
      begin
        read_api_token
      rescue
        raise 'API token not found from arguments nor from .edicy file'.red
      end
    end
    Edicy.site = $site_url
    Edicy.api_token = $api_token
  end
  true
end

on_error do |exception|
  # puts "ERROR: #{exception}"
  # return false to skip default error handling
  puts exception.backtrace
  false
end

exit run(ARGV)
