#!/usr/bin/env ruby

# TODO: Not needed after bundled as gem
gem 'liquid'
gem 'guard'
require 'gli'

$LOAD_PATH << File.expand_path('../lib', File.dirname(__FILE__))
require 'json'

require 'edicy/dtk'
require 'edicy/dtk/guard'
require 'edicy/dtk/renderer'
require 'edicy/dtk/filemanager'
require 'edicy/dtk/filemanager'
require 'edicy_api'

include GLI::App

CONFIG = ".edicy"

program_desc 'A tool to fetch and update Edicy design components'

version Edicy::Dtk::VERSION

desc 'Show additional information while running'
switch [:v,:verbose]

desc 'Provide a site url'
arg_name :SITE_URL
flag ["s", "site"]

desc 'Provide an API token'
arg_name :API_TOKEN
flag ["t", "token"]

desc 'Initializes the local folder structure and files for a site'
long_desc "The init command takes a site url and an api token 
          as arguments, fetches the structure of the site and 
          recreates it locally in the same folder the command 
          was evoked in.\n
          If the site-url and/or api-token isn't provided, the tool
          looks for a .edicy file to get the site url and then looks
          for a .edicy file in your $HOME folder to get the api
          token."
command :init do |c|
  c.action do |global_options,options,args|
    puts "init command ran for site #{$site_url} and api token #{$api_token}"
  end
end

desc 'Describe pull here'
arg_name 'Describe arguments to pull here'
command :pull do |c|
  c.action do |global_options,options,args|
    @filemanager = Edicy::Dtk::FileManager.new
    @filemanager.create_folders
    @filemanager.create_files
  end
end

desc 'Describe push here'
arg_name 'Describe arguments to push here'
command :push do |c|
  c.action do |global_options,options,args|
    # TODO: implement push
  end
end

desc 'Watches for file changes in the current directory'
arg_name 'Describe arguments to watch here'
command :watch do |c|
  c.action do |global_options, options, args|
    $renderer ||= Edicy::Dtk::Renderer.new(Dir.pwd)

    Edicy::Dtk::Guuard.new($renderer).run

    while ::Guard.running do
      sleep 0.5
    end
  end
end

desc 'Describe build here'
arg_name 'Describe arguments to build here'
command :build do |c|
  c.action do |global_options,options,args|
    $renderer ||= Edicy::Dtk::Renderer.new(Dir.pwd)
    $renderer.render_all
  end
end

pre do |global,command,options,args|
  unless command.name == :watch
    $config = Edicy::Dtk.read_config
    $site_url = global["site"] || $config[:site_url]
    $api_token = global["token"] || $config[:api_token]

    if $site_url.nil?
      begin
        read_site_url
      rescue
        raise "Site URL not found from arguments nor from .edicy file"
      end
    end

    if $api_token.nil?
      begin
        read_api_token
      rescue
        raise "API token not found from arguments nor from .edicy file"
      end
    end
    Edicy.site = $site_url
    Edicy.api_token = $api_token
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  puts "ERROR: #{exception}"
  # return false to skip default error handling
  false
end

exit run(ARGV)
